type 'a list = Nil | Cons of 'a * 'a list

type external boolean = "bool"

let external (btrue : boolean) = "true"
let external (bfalse : boolean) = "false"
let external (andb : boolean -> boolean -> boolean) = "fun x y -> x && y"
let external (orb : boolean -> boolean -> boolean) = "fun x y -> x || y"
let external (equal_int : int -> int -> boolean) = "fun x y -> x = y"
let external (equal_char : char -> char -> boolean) = "fun x y -> x = y"
let external (lt_int : int -> int -> boolean) = "fun x y -> x < y"

class Eq 'a { equal : 'a -> 'a -> boolean }

instance Eq int { equal = equal_int }

instance Eq char { equal = equal_char }

instance ['a] Eq 'a => Eq 'a list {
  equal = fun l1 -> fun l2 ->
    match l1  with
      | Nil -> (match l2  with Nil -> btrue  | _ -> bfalse )
      | Cons (x, xs) -> (
        match l2  with
          | Nil ->
            bfalse
          | Cons (y, ys) ->
            andb (equal x y) (equal xs ys)
      )
}

class Eq 'a => Ord 'a {
  lt : 'a -> 'a -> boolean
}

instance Ord int {
  lt = lt_int
}

instance ['a] Ord 'a => Ord 'a list {
  lt = fun l1 -> fun l2 ->
   match l1 with
     | Nil -> btrue 
     | Cons (x, xs) -> (
       match l2 with
         | Nil ->
           bfalse
         | Cons (y, ys) ->
           orb
             (lt x y)
             (andb (equal x y) (lt xs ys))
     )
}

let rec search = fun x -> fun l ->
   match l with
     | Nil -> bfalse
     | Cons (y, ys) -> orb (equal x y) (search x ys)
